"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/crowd-density/route";
exports.ids = ["app/api/crowd-density/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrowd-density%2Froute&page=%2Fapi%2Fcrowd-density%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrowd-density%2Froute.ts&appDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrowd-density%2Froute&page=%2Fapi%2Fcrowd-density%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrowd-density%2Froute.ts&appDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_youse_OneDrive_Desktop_KAU_Fourth_Year_IT_Term2_CPIT_455_Final_Project_tafweej_Hajj_src_app_api_crowd_density_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/crowd-density/route.ts */ \"(rsc)/./src/app/api/crowd-density/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/crowd-density/route\",\n        pathname: \"/api/crowd-density\",\n        filename: \"route\",\n        bundlePath: \"app/api/crowd-density/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\youse\\\\OneDrive\\\\Desktop\\\\KAU\\\\Fourth_Year_IT\\\\Term2\\\\CPIT-455\\\\Final-Project\\\\tafweej_Hajj\\\\src\\\\app\\\\api\\\\crowd-density\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_youse_OneDrive_Desktop_KAU_Fourth_Year_IT_Term2_CPIT_455_Final_Project_tafweej_Hajj_src_app_api_crowd_density_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/crowd-density/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjcm93ZC1kZW5zaXR5JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjcm93ZC1kZW5zaXR5JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY3Jvd2QtZGVuc2l0eSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUN5b3VzZSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q0tBVSU1Q0ZvdXJ0aF9ZZWFyX0lUJTVDVGVybTIlNUNDUElULTQ1NSU1Q0ZpbmFsLVByb2plY3QlNUN0YWZ3ZWVqX0hhamolNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q3lvdXNlJTVDT25lRHJpdmUlNUNEZXNrdG9wJTVDS0FVJTVDRm91cnRoX1llYXJfSVQlNUNUZXJtMiU1Q0NQSVQtNDU1JTVDRmluYWwtUHJvamVjdCU1Q3RhZndlZWpfSGFqaiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDOEY7QUFDM0s7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWpqLW5hdmlnYXRvci8/ZjEwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFx5b3VzZVxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXEtBVVxcXFxGb3VydGhfWWVhcl9JVFxcXFxUZXJtMlxcXFxDUElULTQ1NVxcXFxGaW5hbC1Qcm9qZWN0XFxcXHRhZndlZWpfSGFqalxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxjcm93ZC1kZW5zaXR5XFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jcm93ZC1kZW5zaXR5L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY3Jvd2QtZGVuc2l0eVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY3Jvd2QtZGVuc2l0eS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXHlvdXNlXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcS0FVXFxcXEZvdXJ0aF9ZZWFyX0lUXFxcXFRlcm0yXFxcXENQSVQtNDU1XFxcXEZpbmFsLVByb2plY3RcXFxcdGFmd2Vlal9IYWpqXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGNyb3dkLWRlbnNpdHlcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2Nyb3dkLWRlbnNpdHkvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrowd-density%2Froute&page=%2Fapi%2Fcrowd-density%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrowd-density%2Froute.ts&appDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/crowd-density/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/crowd-density/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/crowdSensors */ \"(rsc)/./src/lib/crowdSensors.ts\");\n\n\n\n// GET handler to fetch crowd density data\nasync function GET(request) {\n    try {\n        // Log environment variables (masked for security)\n        console.log(\"Supabase URL available:\", !!\"https://uowkmsvtqrsyblobsazw.supabase.co/\");\n        console.log(\"Supabase Anon Key available:\", !!\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvd2ttc3Z0cXJzeWJsb2JzYXp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0Mzc2NTgsImV4cCI6MjA2MTAxMzY1OH0.EBQ3Pn9yvN2L6G5HTe5c10bGOF8xs28jQ-plE1g8HOc\");\n        console.log(\"Supabase Service Role Key available:\", !!process.env.SUPABASE_SERVICE_ROLE_KEY);\n        console.log(\"supabaseAdmin client available:\", !!_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin);\n        // Extract the force parameter from the URL\n        const { searchParams } = new URL(request.url);\n        const forceRefresh = searchParams.get(\"force\") === \"true\";\n        // If supabaseAdmin is not available, skip database and use direct calculation\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin) {\n            console.log(\"No supabaseAdmin client, using direct calculation\");\n            const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n        }\n        try {\n            // If force refresh is requested, generate new data\n            if (forceRefresh) {\n                console.log(\"Force refresh requested, generating new crowd density data\");\n                const result = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.updateCrowdDensityData)();\n                // If we got data directly from updateCrowdDensityData, use it\n                if (result.data) {\n                    console.log(\"Using data returned directly from updateCrowdDensityData\");\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result.data);\n                }\n                if (\"error\" in result) {\n                    console.error(\"Error in updateCrowdDensityData during force refresh:\", result.error);\n                    // Use direct calculation instead\n                    const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n                }\n                console.log(\"Fetching fresh data after forced update\");\n                try {\n                    const { data: freshData, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"crowd_density\").select(\"*\").order(\"updated_at\", {\n                        ascending: false\n                    });\n                    if (fetchError) {\n                        throw fetchError;\n                    }\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(freshData);\n                } catch (dbErr) {\n                    console.error(\"DB error after force refresh, using direct calculation:\", dbErr);\n                    const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n                }\n            }\n            // First check if data exists in database\n            try {\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"crowd_density\").select(\"*\").order(\"updated_at\", {\n                    ascending: false\n                });\n                if (error) {\n                    throw error;\n                }\n                // If we have data and it was updated in the last 5 minutes, use it\n                const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();\n                const hasRecentData = data && data.length > 0 && data[0].updated_at > fiveMinutesAgo;\n                if (hasRecentData) {\n                    console.log(\"Using recent data from database\");\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(data);\n                }\n            } catch (dbErr) {\n                console.error(\"Error querying database:\", dbErr);\n            // Continue to calculating new data\n            }\n            // Otherwise, generate new data\n            console.log(\"Generating new crowd density data\");\n            try {\n                const result = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.updateCrowdDensityData)();\n                // If we got data directly from updateCrowdDensityData, use it\n                if (result.data) {\n                    console.log(\"Using data returned directly from updateCrowdDensityData\");\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result.data);\n                }\n                if (\"error\" in result) {\n                    throw new Error(`Failed to update crowd density data: ${result.error}`);\n                }\n                // Fetch the newly inserted data\n                const { data: freshData, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"crowd_density\").select(\"*\").order(\"updated_at\", {\n                    ascending: false\n                });\n                if (fetchError) {\n                    throw fetchError;\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(freshData);\n            } catch (updateErr) {\n                console.error(\"Error during data update:\", updateErr);\n                // Use direct calculation as fallback\n                const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n            }\n        } catch (supabaseErr) {\n            console.error(\"Supabase operation error:\", supabaseErr);\n            // If database operations fail, return calculated data directly\n            const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n        }\n    } catch (mainError) {\n        console.error(\"Main error handler caught:\", mainError);\n        // Final fallback - always return calculated data if all else fails\n        try {\n            const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(calculatedData);\n        } catch (calcError) {\n            console.error(\"Even calculation failed:\", calcError);\n            // Return empty array instead of an error to ensure JSON is returned\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json([]);\n        }\n    }\n}\n// POST handler to update crowd density data\nasync function POST(request) {\n    try {\n        console.log(\"POST request to crowd-density API\");\n        // If supabaseAdmin is not available, just recalculate directly\n        if (!_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin) {\n            console.log(\"No supabaseAdmin client, calculating directly\");\n            try {\n                // Get request body\n                const body = await request.json();\n                // Check if it's a recalculation request\n                if (body.recalculate === true) {\n                    const result = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.updateCrowdDensityData)();\n                    // Use data from the result if available\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: result.message || \"Crowd density data recalculated directly (no DB)\",\n                        count: result.count || 0\n                    });\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"Manual entry not supported without database\"\n                }, {\n                    status: 400\n                });\n            } catch (err) {\n                console.error(\"Error parsing request or calculating density:\", err);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"Error processing request\"\n                }, {\n                    status: 400\n                });\n            }\n        }\n        try {\n            // Get request body\n            const body = await request.json();\n            // Check if it's a recalculation request\n            if (body.recalculate === true) {\n                console.log(\"Recalculation request received\");\n                try {\n                    const result = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.updateCrowdDensityData)();\n                    // If we have data directly in the result, report success\n                    if (result.data) {\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            success: true,\n                            message: result.message || \"Crowd density data recalculated\",\n                            count: result.count || result.data.length\n                        });\n                    }\n                    if (\"error\" in result) {\n                        throw new Error(`Failed to recalculate: ${result.error}`);\n                    }\n                    console.log(\"Recalculation successful:\", result);\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"Crowd density data recalculated\",\n                        count: result.count || 0\n                    });\n                } catch (recalcErr) {\n                    console.error(\"Recalculation error:\", recalcErr);\n                    // Return success with direct calculation\n                    const calculatedData = await (0,_lib_crowdSensors__WEBPACK_IMPORTED_MODULE_2__.calculateRealisticCrowdDensities)();\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        message: \"Used direct calculation (DB update failed)\",\n                        count: calculatedData.length\n                    });\n                }\n            }\n            // Otherwise handle manual entry\n            console.log(\"Manual entry request received\");\n            // Validate request body\n            if (!body.location_name || !body.coordinates || !body.density_level) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Missing required fields\"\n                }, {\n                    status: 400\n                });\n            }\n            // Update or insert crowd density data\n            try {\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabaseAdmin.from(\"crowd_density\").upsert({\n                    location_name: body.location_name,\n                    coordinates: body.coordinates,\n                    density_level: body.density_level,\n                    updated_at: new Date().toISOString(),\n                    crowd_size: body.crowd_size || null,\n                    occupancy_percentage: body.occupancy_percentage || null,\n                    meta_data: body.meta_data || null\n                }).select();\n                if (error) {\n                    throw error;\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(data);\n            } catch (upsertErr) {\n                console.error(\"Error during upsert operation:\", upsertErr);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Database update failed, but request was valid\"\n                }, {\n                    status: 500\n                });\n            }\n        } catch (bodyErr) {\n            console.error(\"Error parsing request body:\", bodyErr);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid request format\"\n            }, {\n                status: 400\n            });\n        }\n    } catch (mainErr) {\n        console.error(\"Unhandled error in POST handler:\", mainErr);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Server error processing request\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/crowd-density/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/crowdSensors.ts":
/*!*********************************!*\
  !*** ./src/lib/crowdSensors.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRealisticCrowdDensities: () => (/* binding */ calculateRealisticCrowdDensities),\n/* harmony export */   updateCrowdDensityData: () => (/* binding */ updateCrowdDensityData)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./src/lib/supabase.ts\");\n// Simulated crowd density sensor network for Hajj sites\n\n// Total pilgrims range: 250,000 - 350,000\nconst TOTAL_PILGRIMS_MIN = 250000;\nconst TOTAL_PILGRIMS_MAX = 350000;\nconst TOTAL_PILGRIMS_AVG = Math.floor((TOTAL_PILGRIMS_MIN + TOTAL_PILGRIMS_MAX) / 2);\n// Define physical space characteristics for each location\nconst LOCATION_SIZES = {\n    \"Masjid al-Haram\": {\n        areaInSquareMeters: 356800,\n        capacity: 120000,\n        sections: [\n            {\n                id: \"mataf\",\n                name: \"Mataf Area\",\n                percentage: 0.15\n            },\n            {\n                id: \"ground\",\n                name: \"Ground Floor\",\n                percentage: 0.45\n            },\n            {\n                id: \"first\",\n                name: \"First Floor\",\n                percentage: 0.25\n            },\n            {\n                id: \"roof\",\n                name: \"Roof Area\",\n                percentage: 0.15\n            }\n        ]\n    },\n    \"Mina\": {\n        areaInSquareMeters: 812000,\n        capacity: 240000,\n        sections: [\n            {\n                id: \"tents-a\",\n                name: \"Tents Area A\",\n                percentage: 0.3\n            },\n            {\n                id: \"tents-b\",\n                name: \"Tents Area B\",\n                percentage: 0.3\n            },\n            {\n                id: \"tents-c\",\n                name: \"Tents Area C\",\n                percentage: 0.3\n            },\n            {\n                id: \"services\",\n                name: \"Services Area\",\n                percentage: 0.1\n            }\n        ]\n    },\n    \"Jamaraat Bridge\": {\n        areaInSquareMeters: 52000,\n        capacity: 100000,\n        sections: [\n            {\n                id: \"lower\",\n                name: \"Lower Level\",\n                percentage: 0.3\n            },\n            {\n                id: \"middle\",\n                name: \"Middle Level\",\n                percentage: 0.4\n            },\n            {\n                id: \"upper\",\n                name: \"Upper Level\",\n                percentage: 0.3\n            }\n        ]\n    },\n    \"Arafat\": {\n        areaInSquareMeters: 1456000,\n        capacity: 300000,\n        sections: [\n            {\n                id: \"jabal\",\n                name: \"Jabal al-Rahmah\",\n                percentage: 0.2\n            },\n            {\n                id: \"nimrah\",\n                name: \"Nimrah\",\n                percentage: 0.3\n            },\n            {\n                id: \"uranah\",\n                name: \"Uranah\",\n                percentage: 0.25\n            },\n            {\n                id: \"other\",\n                name: \"Other Areas\",\n                percentage: 0.25\n            }\n        ]\n    },\n    \"Muzdalifah\": {\n        areaInSquareMeters: 623000,\n        capacity: 250000,\n        sections: [\n            {\n                id: \"mash\",\n                name: \"Al-Mash'ar al-Haram\",\n                percentage: 0.3\n            },\n            {\n                id: \"north\",\n                name: \"Northern Area\",\n                percentage: 0.35\n            },\n            {\n                id: \"south\",\n                name: \"Southern Area\",\n                percentage: 0.35\n            }\n        ]\n    },\n    // Additional locations\n    \"Mina Entrance Gate 1\": {\n        areaInSquareMeters: 3000,\n        capacity: 15000,\n        sections: [\n            {\n                id: \"entry\",\n                name: \"Entry Points\",\n                percentage: 0.4\n            },\n            {\n                id: \"security\",\n                name: \"Security Check\",\n                percentage: 0.3\n            },\n            {\n                id: \"waiting\",\n                name: \"Waiting Area\",\n                percentage: 0.3\n            }\n        ]\n    },\n    \"Tent City Section A\": {\n        areaInSquareMeters: 120000,\n        capacity: 80000,\n        sections: [\n            {\n                id: \"a1\",\n                name: \"Block A1\",\n                percentage: 0.25\n            },\n            {\n                id: \"a2\",\n                name: \"Block A2\",\n                percentage: 0.25\n            },\n            {\n                id: \"a3\",\n                name: \"Block A3\",\n                percentage: 0.25\n            },\n            {\n                id: \"a4\",\n                name: \"Block A4\",\n                percentage: 0.25\n            }\n        ]\n    },\n    \"Jamarat Central Access\": {\n        areaInSquareMeters: 8000,\n        capacity: 30000,\n        sections: [\n            {\n                id: \"entry\",\n                name: \"Entry Zone\",\n                percentage: 0.4\n            },\n            {\n                id: \"corridor\",\n                name: \"Main Corridor\",\n                percentage: 0.4\n            },\n            {\n                id: \"exit\",\n                name: \"Exit Zone\",\n                percentage: 0.2\n            }\n        ]\n    }\n};\n// Calculate the sum of all location capacities to verify against total pilgrims\nconst TOTAL_CAPACITY = Object.values(LOCATION_SIZES).reduce((sum, location)=>sum + location.capacity, 0);\n// Define density threshold levels (people per square meter)\n// Adjusted for the pilgrims count of 250,000-350,000\nconst DENSITY_THRESHOLDS = {\n    low: 0.3,\n    medium: 0.8,\n    high: 1.5\n};\n// Time-based modifiers for various Hajj periods - increase/decrease multiplier\nconst TIME_MODIFIERS = {\n    beforePrayer: 2.0,\n    duringPrayer: 2.5,\n    afterPrayer: 1.8,\n    jamarat: 3.0,\n    tawaf: 2.5,\n    sayee: 2.0,\n    night: 0.7,\n    earlyMorning: 0.8,\n    hajjDay: 3.0\n};\n// Weather impacts on crowd behavior\nconst WEATHER_MODIFIERS = {\n    hot: 0.9,\n    rain: 0.7,\n    pleasant: 1.2\n};\n// Function to get realistic crowd densities based on various factors\nasync function calculateRealisticCrowdDensities() {\n    const now = new Date();\n    const hour = now.getHours();\n    const locations = Object.keys(LOCATION_SIZES);\n    // Determine current factors affecting density\n    let timeModifier = 1.0;\n    // Time of day adjustments\n    if (hour >= 22 || hour < 4) {\n        timeModifier = TIME_MODIFIERS.night;\n    } else if (hour >= 4 && hour < 6) {\n        timeModifier = TIME_MODIFIERS.earlyMorning;\n    } else if ([\n        5,\n        12,\n        15,\n        18,\n        20\n    ].includes(hour)) {\n        // Prayer times\n        timeModifier = TIME_MODIFIERS.duringPrayer;\n    } else if ([\n        6,\n        13,\n        16,\n        19,\n        21\n    ].includes(hour)) {\n        // After prayer\n        timeModifier = TIME_MODIFIERS.afterPrayer;\n    } else if ([\n        4,\n        11,\n        14,\n        17,\n        19\n    ].includes(hour)) {\n        // Before prayer\n        timeModifier = TIME_MODIFIERS.beforePrayer;\n    }\n    // Special time adjustments for specific locations\n    const jamarat_hours = [\n        6,\n        7,\n        8,\n        13,\n        14,\n        15,\n        16\n    ];\n    const tawaf_hours = [\n        5,\n        6,\n        7,\n        21,\n        22,\n        23\n    ];\n    // Hajj day simulation (based on month/day/hour)\n    // For demo purposes, we'll simulate one day of the week as Hajj day\n    const isHajjDay = now.getDay() === 5; // Friday for demo purposes\n    // For demo purposes, force \"Hajj day\" behavior when minutes are divisible by 3\n    const forcedHajjDay = now.getMinutes() % 3 === 0;\n    // Weather simulation (simplified)\n    // For demo, we'll base it on time of day in Mecca which is typically hot midday\n    let weatherModifier = 1.0;\n    if (hour >= 11 && hour <= 15) {\n        weatherModifier = WEATHER_MODIFIERS.hot;\n    } else if (hour >= 16 && hour <= 18) {\n        weatherModifier = WEATHER_MODIFIERS.pleasant;\n    }\n    // Determine current total pilgrim count - varies within the range\n    // Use minute of the hour to create some natural variation\n    const pilgrimVariation = now.getMinutes() / 60 * (TOTAL_PILGRIMS_MAX - TOTAL_PILGRIMS_MIN);\n    const currentTotalPilgrims = TOTAL_PILGRIMS_MIN + Math.floor(pilgrimVariation);\n    // Generate realistic crowd density for each location\n    const densityData = locations.map((locationName, index)=>{\n        const locationData = LOCATION_SIZES[locationName];\n        // Apply location-specific modifiers\n        let locationTimeModifier = timeModifier;\n        if (locationName === \"Jamaraat Bridge\" && jamarat_hours.includes(hour)) {\n            locationTimeModifier = TIME_MODIFIERS.jamarat;\n        } else if (locationName === \"Masjid al-Haram\" && tawaf_hours.includes(hour)) {\n            locationTimeModifier = TIME_MODIFIERS.tawaf;\n        } else if (locationName === \"Arafat\" && (isHajjDay || forcedHajjDay)) {\n            locationTimeModifier = TIME_MODIFIERS.hajjDay;\n        }\n        // Use deterministic calculations for density based on location and time\n        // instead of fully random to ensure consistent patterns\n        let baseOccupancyPercentage;\n        // Calculate location's portion of total pilgrims\n        const locationCapacityRatio = locationData.capacity / TOTAL_CAPACITY;\n        const baseExpectedPilgrims = currentTotalPilgrims * locationCapacityRatio;\n        // Each location has different baseline crowd patterns\n        switch(locationName){\n            case \"Masjid al-Haram\":\n                // Masjid al-Haram is consistently busier\n                baseOccupancyPercentage = 0.7 + hour % 3 * 0.1;\n                break;\n            case \"Jamaraat Bridge\":\n                // Jamarat is extremely busy during specific hours\n                if (jamarat_hours.includes(hour)) {\n                    baseOccupancyPercentage = 0.9;\n                } else {\n                    baseOccupancyPercentage = 0.5;\n                }\n                break;\n            case \"Mina\":\n                // Mina varies significantly by day\n                baseOccupancyPercentage = isHajjDay || forcedHajjDay ? 0.95 : 0.6;\n                break;\n            case \"Arafat\":\n                // Arafat is extremely busy on Hajj day, empty otherwise\n                baseOccupancyPercentage = isHajjDay || forcedHajjDay ? 0.98 : 0.3;\n                break;\n            case \"Muzdalifah\":\n                // Muzdalifah is busy in the evening\n                baseOccupancyPercentage = hour >= 18 && hour <= 23 ? 0.85 : 0.4;\n                break;\n            default:\n                // Use minutes/seconds as a seed for other locations to get variation\n                baseOccupancyPercentage = 0.4 + now.getMinutes() % 10 / 10;\n        }\n        // DEMO: For demonstration purposes, ensure we have a mix of all density levels\n        // Force some locations to specific density levels\n        if (index % 5 === 0) {\n            // Every 5th location (by order) is forced to high density\n            baseOccupancyPercentage = 0.9;\n            locationTimeModifier = 2.0;\n        } else if (index % 5 === 1) {\n            // Every 5th+1 location is forced to medium density\n            baseOccupancyPercentage = 0.7;\n            locationTimeModifier = 1.5;\n        } else if (index % 5 === 2) {\n            // Every 5th+2 location is forced to critical density\n            baseOccupancyPercentage = 1.0;\n            locationTimeModifier = 2.5;\n        } else if (index % 5 === 3) {\n            // Every 5th+3 location is forced to low density\n            baseOccupancyPercentage = 0.4;\n            locationTimeModifier = 1.0;\n        }\n        // Every 5th+4 location uses the natural calculation\n        // Apply all modifiers\n        const modifiedOccupancy = baseOccupancyPercentage * locationTimeModifier * weatherModifier;\n        // Add slight randomness (±5% instead of ±10% for more consistency)\n        const finalOccupancy = modifiedOccupancy * (0.95 + Math.random() * 0.1);\n        // Calculate actual crowd size based on occupancy percentage and capacity\n        const crowdSize = Math.floor(finalOccupancy * locationData.capacity);\n        // Calculate density (people per square meter)\n        const density = crowdSize / locationData.areaInSquareMeters;\n        // Determine density level based on thresholds\n        let densityLevel;\n        if (density <= DENSITY_THRESHOLDS.low) {\n            densityLevel = \"low\";\n        } else if (density <= DENSITY_THRESHOLDS.medium) {\n            densityLevel = \"medium\";\n        } else if (density <= DENSITY_THRESHOLDS.high) {\n            densityLevel = \"high\";\n        } else {\n            densityLevel = \"critical\";\n        }\n        // Generate section-specific data\n        const sectionData = locationData.sections.map((section)=>{\n            // Each section has slightly different occupancy\n            const sectionVariation = 0.9 + Math.random() * 0.2; // 90-110% of location average\n            const sectionDensity = density * sectionVariation;\n            // Determine section density level\n            let sectionDensityLevel;\n            if (sectionDensity <= DENSITY_THRESHOLDS.low) {\n                sectionDensityLevel = \"low\";\n            } else if (sectionDensity <= DENSITY_THRESHOLDS.medium) {\n                sectionDensityLevel = \"medium\";\n            } else if (sectionDensity <= DENSITY_THRESHOLDS.high) {\n                sectionDensityLevel = \"high\";\n            } else {\n                sectionDensityLevel = \"critical\";\n            }\n            return {\n                id: section.id,\n                name: section.name,\n                density: sectionDensity.toFixed(2),\n                density_level: sectionDensityLevel,\n                crowd_size: Math.floor(crowdSize * section.percentage)\n            };\n        });\n        // Add some randomness to the exact coordinates to represent different areas\n        const baseCoordinates = getBaseCoordinates(locationName);\n        const coordinates = {\n            lng: baseCoordinates.lng + (Math.random() * 0.0005 - 0.00025),\n            lat: baseCoordinates.lat + (Math.random() * 0.0005 - 0.00025)\n        };\n        return {\n            location_name: locationName,\n            coordinates: coordinates,\n            density: density.toFixed(2),\n            density_level: densityLevel,\n            crowd_size: crowdSize,\n            capacity: locationData.capacity,\n            occupancy_percentage: (finalOccupancy * 100).toFixed(1),\n            sections: sectionData,\n            timestamp: new Date().toISOString(),\n            meta_data: {\n                density: parseFloat(density.toFixed(2)),\n                capacity: locationData.capacity,\n                sections: sectionData,\n                current_total_pilgrims: currentTotalPilgrims\n            }\n        };\n    });\n    // Debug information about total pilgrim distribution\n    const totalCrowdSize = densityData.reduce((sum, location)=>sum + location.crowd_size, 0);\n    console.log(`Total pilgrims currently distributed: ${totalCrowdSize} (target: ${currentTotalPilgrims})`);\n    return densityData;\n}\n// Function to update database with calculated density\nasync function updateCrowdDensityData() {\n    try {\n        console.log(\"Starting updateCrowdDensityData\");\n        const densityData = await calculateRealisticCrowdDensities();\n        console.log(`Generated ${densityData.length} density data points`);\n        // Log density levels for debugging\n        console.log(\"Current density levels:\");\n        densityData.forEach((location)=>{\n            console.log(`${location.location_name}: ${location.density_level} (${location.density})`);\n        });\n        if (!_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin) {\n            console.log(\"Supabase admin client not available, returning calculated data directly\");\n            return {\n                success: true,\n                count: densityData.length,\n                data: densityData,\n                message: \"Database connection not available, using calculated data\"\n            };\n        }\n        // Clear existing data and insert new data\n        try {\n            console.log(\"Attempting to clear existing data\");\n            const { error: deleteError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"crowd_density\").delete().neq(\"id\", 0); // Delete all records\n            if (deleteError) {\n                console.error(\"Error clearing existing data:\", deleteError);\n                return {\n                    success: true,\n                    error: deleteError,\n                    data: densityData,\n                    count: densityData.length,\n                    message: \"Failed to clear existing data, but returning calculated data\"\n                };\n            }\n            // Insert new data\n            console.log(\"Preparing data for insertion\");\n            const upsertData = densityData.map((location)=>({\n                    location_name: location.location_name,\n                    coordinates: location.coordinates,\n                    density_level: location.density_level,\n                    updated_at: new Date().toISOString(),\n                    crowd_size: location.crowd_size,\n                    occupancy_percentage: location.occupancy_percentage,\n                    meta_data: {\n                        density: location.density,\n                        capacity: location.capacity,\n                        sections: location.sections,\n                        current_total_pilgrims: location.meta_data.current_total_pilgrims\n                    }\n                }));\n            console.log(\"Attempting to insert data into Supabase\");\n            const { error: insertError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"crowd_density\").insert(upsertData);\n            if (insertError) {\n                console.error(\"Error inserting crowd density data:\", insertError);\n                return {\n                    success: true,\n                    error: insertError,\n                    data: densityData,\n                    count: densityData.length,\n                    message: \"Failed to insert data, but returning calculated data\"\n                };\n            }\n            console.log(\"Successfully updated crowd density data\");\n            return {\n                success: true,\n                count: densityData.length,\n                data: densityData\n            };\n        } catch (dbError) {\n            console.error(\"Database operation error:\", dbError);\n            return {\n                success: true,\n                error: dbError,\n                data: densityData,\n                count: densityData.length,\n                message: \"Database error, but returning calculated data\"\n            };\n        }\n    } catch (error) {\n        console.error(\"Error in updateCrowdDensityData:\", error);\n        // Try to return calculated data directly as a fallback\n        try {\n            const directData = await calculateRealisticCrowdDensities();\n            return {\n                success: true,\n                error,\n                data: directData,\n                count: directData.length,\n                message: \"Error occurred but returning direct calculation\"\n            };\n        } catch (calcError) {\n            console.error(\"Failed even direct calculation:\", calcError);\n            return {\n                error: \"Complete calculation failure\"\n            };\n        }\n    }\n}\n// Helper function to get base coordinates for each location\nfunction getBaseCoordinates(locationName) {\n    const coordinatesMap = {\n        \"Masjid al-Haram\": {\n            lng: 39.826174,\n            lat: 21.422487\n        },\n        \"Mina\": {\n            lng: 39.892966,\n            lat: 21.413249\n        },\n        \"Jamaraat Bridge\": {\n            lng: 39.873485,\n            lat: 21.42365\n        },\n        \"Arafat\": {\n            lng: 39.984687,\n            lat: 21.355461\n        },\n        \"Muzdalifah\": {\n            lng: 39.936322,\n            lat: 21.383082\n        },\n        \"Mina Entrance Gate 1\": {\n            lng: 39.887235,\n            lat: 21.411856\n        },\n        \"Tent City Section A\": {\n            lng: 39.889124,\n            lat: 21.414501\n        },\n        \"Jamarat Central Access\": {\n            lng: 39.871952,\n            lat: 21.423850\n        }\n    };\n    return coordinatesMap[locationName] || {\n        lng: 39.826174,\n        lat: 21.422487\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/crowdSensors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCrowdDensity: () => (/* binding */ fetchCrowdDensity),\n/* harmony export */   fetchSafetyAlerts: () => (/* binding */ fetchSafetyAlerts),\n/* harmony export */   getOptimalRoute: () => (/* binding */ getOptimalRoute),\n/* harmony export */   subscribeToCrowdDensity: () => (/* binding */ subscribeToCrowdDensity),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Environment variables\nconst supabaseUrl = \"https://uowkmsvtqrsyblobsazw.supabase.co/\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVvd2ttc3Z0cXJzeWJsb2JzYXp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0Mzc2NTgsImV4cCI6MjA2MTAxMzY1OH0.EBQ3Pn9yvN2L6G5HTe5c10bGOF8xs28jQ-plE1g8HOc\" || 0;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || \"\";\n// Client for client-side and authenticated requests\n// Ensure we have a valid key\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Service role client for server-side operations (only used in server components or API routes)\n// Only create if we have a valid service key\nconst supabaseAdmin = supabaseServiceKey && supabaseServiceKey.length > 0 ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : null;\n// Fetch crowd density data\nasync function fetchCrowdDensity() {\n    const { data, error } = await supabase.from(\"crowd_density\").select(\"*\").order(\"updated_at\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching crowd density:\", error);\n        return [];\n    }\n    return data;\n}\n// Subscribe to crowd density updates\nfunction subscribeToCrowdDensity(callback) {\n    const subscription = supabase.channel(\"crowd_density_updates\").on(\"postgres_changes\", {\n        event: \"*\",\n        schema: \"public\",\n        table: \"crowd_density\"\n    }, (payload)=>{\n        fetchCrowdDensity().then(callback);\n    }).subscribe();\n    return ()=>{\n        supabase.removeChannel(subscription);\n    };\n}\n// Fetch safety alerts\nasync function fetchSafetyAlerts() {\n    const { data, error } = await supabase.from(\"safety_alerts\").select(\"*\").gt(\"expires_at\", new Date().toISOString()).order(\"severity\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching safety alerts:\", error);\n        return [];\n    }\n    return data;\n}\n// For demo purposes, mock route calculation\nasync function getOptimalRoute(start, destination) {\n    // In a real app, this would call a serverless function or external API\n    // For the prototype, we'll return mock data\n    return {\n        distance: \"2.3 km\",\n        duration: \"30 minutes\",\n        congestion_level: \"medium\",\n        waypoints: []\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBcUQ7QUFFckQsd0JBQXdCO0FBQ3hCLE1BQU1DLGNBQWNDLDJDQUFvQyxJQUFJO0FBQzVELE1BQU1HLGtCQUFrQkgsa05BQXlDLElBQUk7QUFDckUsTUFBTUsscUJBQXFCTCxRQUFRQyxHQUFHLENBQUNLLHlCQUF5QixJQUFJO0FBRXBFLG9EQUFvRDtBQUNwRCw2QkFBNkI7QUFDdEIsTUFBTUMsV0FBV1QsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQjtBQUVuRSxnR0FBZ0c7QUFDaEcsNkNBQTZDO0FBQ3RDLE1BQU1LLGdCQUFnQkgsc0JBQXNCQSxtQkFBbUJJLE1BQU0sR0FBRyxJQUMzRVgsbUVBQVlBLENBQUNDLGFBQWFNLG9CQUFvQjtJQUM1Q0ssTUFBTTtRQUNKQyxrQkFBa0I7UUFDbEJDLGdCQUFnQjtJQUNsQjtBQUNGLEtBQ0EsS0FBSztBQW9DVCwyQkFBMkI7QUFDcEIsZUFBZUM7SUFDcEIsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1SLFNBQzNCUyxJQUFJLENBQUMsaUJBQ0xDLE1BQU0sQ0FBQyxLQUNQQyxLQUFLLENBQUMsY0FBYztRQUFFQyxXQUFXO0lBQU07SUFFMUMsSUFBSUosT0FBTztRQUNUSyxRQUFRTCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPLEVBQUU7SUFDWDtJQUNBLE9BQU9EO0FBQ1Q7QUFFQSxxQ0FBcUM7QUFDOUIsU0FBU08sd0JBQXdCQyxRQUF3QztJQUM5RSxNQUFNQyxlQUFlaEIsU0FDbEJpQixPQUFPLENBQUMseUJBQ1JDLEVBQUUsQ0FDRCxvQkFDQTtRQUFFQyxPQUFPO1FBQUtDLFFBQVE7UUFBVUMsT0FBTztJQUFnQixHQUN2RCxDQUFDQztRQUNDaEIsb0JBQW9CaUIsSUFBSSxDQUFDUjtJQUMzQixHQUVEUyxTQUFTO0lBRVosT0FBTztRQUNMeEIsU0FBU3lCLGFBQWEsQ0FBQ1Q7SUFDekI7QUFDRjtBQUVBLHNCQUFzQjtBQUNmLGVBQWVVO0lBQ3BCLE1BQU0sRUFBRW5CLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTVIsU0FDM0JTLElBQUksQ0FBQyxpQkFDTEMsTUFBTSxDQUFDLEtBQ1BpQixFQUFFLENBQUMsY0FBYyxJQUFJQyxPQUFPQyxXQUFXLElBQ3ZDbEIsS0FBSyxDQUFDLFlBQVk7UUFBRUMsV0FBVztJQUFNO0lBRXhDLElBQUlKLE9BQU87UUFDVEssUUFBUUwsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBTyxFQUFFO0lBQ1g7SUFDQSxPQUFPRDtBQUNUO0FBRUEsNENBQTRDO0FBQ3JDLGVBQWV1QixnQkFBZ0JDLEtBQWEsRUFBRUMsV0FBbUI7SUFDdEUsdUVBQXVFO0lBQ3ZFLDRDQUE0QztJQUM1QyxPQUFPO1FBQ0xDLFVBQVU7UUFDVkMsVUFBVTtRQUNWQyxrQkFBa0I7UUFDbEJDLFdBQVcsRUFFVjtJQUNIO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWpqLW5hdmlnYXRvci8uL3NyYy9saWIvc3VwYWJhc2UudHM/MDZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5cclxuLy8gRW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIHx8ICdodHRwczovL2V4YW1wbGUuc3VwYWJhc2UuY28nO1xyXG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCAnZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBjM01pT2lKemRYQmhZbUZ6WlNJc0luSmxaaUk2SW5WdmQydHRjM1owY1hKemVXSnNiMkp6WVhwM0lpd2ljbTlzWlNJNkltRnViMjRpTENKcFlYUWlPakUzTkRVME16YzJOVGdzSW1WNGNDSTZNakEyTVRBeE16WTFPSDAuRUJRM1BuOXl2TjJMNkc1SFRlNWMxMGJHT0Y4eHMyOGpRLXBsRTFnOEhPYyc7XHJcbmNvbnN0IHN1cGFiYXNlU2VydmljZUtleSA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkgfHwgJyc7XHJcblxyXG4vLyBDbGllbnQgZm9yIGNsaWVudC1zaWRlIGFuZCBhdXRoZW50aWNhdGVkIHJlcXVlc3RzXHJcbi8vIEVuc3VyZSB3ZSBoYXZlIGEgdmFsaWQga2V5XHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcclxuXHJcbi8vIFNlcnZpY2Ugcm9sZSBjbGllbnQgZm9yIHNlcnZlci1zaWRlIG9wZXJhdGlvbnMgKG9ubHkgdXNlZCBpbiBzZXJ2ZXIgY29tcG9uZW50cyBvciBBUEkgcm91dGVzKVxyXG4vLyBPbmx5IGNyZWF0ZSBpZiB3ZSBoYXZlIGEgdmFsaWQgc2VydmljZSBrZXlcclxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBzdXBhYmFzZVNlcnZpY2VLZXkgJiYgc3VwYWJhc2VTZXJ2aWNlS2V5Lmxlbmd0aCA+IDBcclxuICA/IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VTZXJ2aWNlS2V5LCB7XHJcbiAgICAgIGF1dGg6IHtcclxuICAgICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcclxuICAgICAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuICA6IG51bGw7XHJcblxyXG4vLyBUeXBlcyBmb3Igb3VyIGRhdGFiYXNlXHJcbmV4cG9ydCB0eXBlIENyb3dkRGVuc2l0eSA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIGxvY2F0aW9uX25hbWU6IHN0cmluZztcclxuICBjb29yZGluYXRlczogeyBsbmc6IG51bWJlcjsgbGF0OiBudW1iZXIgfTtcclxuICBkZW5zaXR5X2xldmVsOiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2NyaXRpY2FsJztcclxuICB1cGRhdGVkX2F0OiBzdHJpbmc7XHJcbiAgLy8gTmV3IGZpZWxkcyBmb3IgcmVhbGlzdGljIGNyb3dkIGRlbnNpdHlcclxuICBjcm93ZF9zaXplPzogbnVtYmVyO1xyXG4gIG9jY3VwYW5jeV9wZXJjZW50YWdlPzogc3RyaW5nO1xyXG4gIG1ldGFfZGF0YT86IHtcclxuICAgIGRlbnNpdHk6IHN0cmluZztcclxuICAgIGNhcGFjaXR5OiBudW1iZXI7XHJcbiAgICBzZWN0aW9uczogQXJyYXk8e1xyXG4gICAgICBpZDogc3RyaW5nO1xyXG4gICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgIGRlbnNpdHk6IHN0cmluZztcclxuICAgICAgZGVuc2l0eV9sZXZlbDogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCc7XHJcbiAgICAgIGNyb3dkX3NpemU6IG51bWJlcjtcclxuICAgIH0+O1xyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTYWZldHlBbGVydCA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBsb2NhdGlvbl9uYW1lOiBzdHJpbmc7XHJcbiAgY29vcmRpbmF0ZXM6IHsgbG5nOiBudW1iZXI7IGxhdDogbnVtYmVyIH07XHJcbiAgc2V2ZXJpdHk6ICdpbmZvJyB8ICd3YXJuaW5nJyB8ICdkYW5nZXInO1xyXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcclxuICBleHBpcmVzX2F0OiBzdHJpbmc7XHJcbn07XHJcblxyXG4vLyBGZXRjaCBjcm93ZCBkZW5zaXR5IGRhdGFcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ3Jvd2REZW5zaXR5KCkge1xyXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnY3Jvd2RfZGVuc2l0eScpXHJcbiAgICAuc2VsZWN0KCcqJylcclxuICAgIC5vcmRlcigndXBkYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcclxuXHJcbiAgaWYgKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjcm93ZCBkZW5zaXR5OicsIGVycm9yKTtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGEgYXMgQ3Jvd2REZW5zaXR5W107XHJcbn1cclxuXHJcbi8vIFN1YnNjcmliZSB0byBjcm93ZCBkZW5zaXR5IHVwZGF0ZXNcclxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZVRvQ3Jvd2REZW5zaXR5KGNhbGxiYWNrOiAoZGF0YTogQ3Jvd2REZW5zaXR5W10pID0+IHZvaWQpIHtcclxuICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdXBhYmFzZVxyXG4gICAgLmNoYW5uZWwoJ2Nyb3dkX2RlbnNpdHlfdXBkYXRlcycpXHJcbiAgICAub24oXHJcbiAgICAgICdwb3N0Z3Jlc19jaGFuZ2VzJyxcclxuICAgICAgeyBldmVudDogJyonLCBzY2hlbWE6ICdwdWJsaWMnLCB0YWJsZTogJ2Nyb3dkX2RlbnNpdHknIH0sXHJcbiAgICAgIChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgZmV0Y2hDcm93ZERlbnNpdHkoKS50aGVuKGNhbGxiYWNrKTtcclxuICAgICAgfVxyXG4gICAgKVxyXG4gICAgLnN1YnNjcmliZSgpO1xyXG5cclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgc3VwYWJhc2UucmVtb3ZlQ2hhbm5lbChzdWJzY3JpcHRpb24pO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIEZldGNoIHNhZmV0eSBhbGVydHNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoU2FmZXR5QWxlcnRzKCkge1xyXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnc2FmZXR5X2FsZXJ0cycpXHJcbiAgICAuc2VsZWN0KCcqJylcclxuICAgIC5ndCgnZXhwaXJlc19hdCcsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSlcclxuICAgIC5vcmRlcignc2V2ZXJpdHknLCB7IGFzY2VuZGluZzogZmFsc2UgfSk7XHJcblxyXG4gIGlmIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc2FmZXR5IGFsZXJ0czonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIHJldHVybiBkYXRhIGFzIFNhZmV0eUFsZXJ0W107XHJcbn1cclxuXHJcbi8vIEZvciBkZW1vIHB1cnBvc2VzLCBtb2NrIHJvdXRlIGNhbGN1bGF0aW9uXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPcHRpbWFsUm91dGUoc3RhcnQ6IHN0cmluZywgZGVzdGluYXRpb246IHN0cmluZykge1xyXG4gIC8vIEluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgY2FsbCBhIHNlcnZlcmxlc3MgZnVuY3Rpb24gb3IgZXh0ZXJuYWwgQVBJXHJcbiAgLy8gRm9yIHRoZSBwcm90b3R5cGUsIHdlJ2xsIHJldHVybiBtb2NrIGRhdGFcclxuICByZXR1cm4ge1xyXG4gICAgZGlzdGFuY2U6ICcyLjMga20nLFxyXG4gICAgZHVyYXRpb246ICczMCBtaW51dGVzJyxcclxuICAgIGNvbmdlc3Rpb25fbGV2ZWw6ICdtZWRpdW0nLFxyXG4gICAgd2F5cG9pbnRzOiBbXHJcbiAgICAgIC8vIFNpbXBsaWZpZWQgcm91dGUgY29vcmRpbmF0ZXMgd291bGQgZ28gaGVyZVxyXG4gICAgXVxyXG4gIH07XHJcbn0gIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwic3VwYWJhc2VTZXJ2aWNlS2V5IiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsInN1cGFiYXNlIiwic3VwYWJhc2VBZG1pbiIsImxlbmd0aCIsImF1dGgiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJmZXRjaENyb3dkRGVuc2l0eSIsImRhdGEiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJvcmRlciIsImFzY2VuZGluZyIsImNvbnNvbGUiLCJzdWJzY3JpYmVUb0Nyb3dkRGVuc2l0eSIsImNhbGxiYWNrIiwic3Vic2NyaXB0aW9uIiwiY2hhbm5lbCIsIm9uIiwiZXZlbnQiLCJzY2hlbWEiLCJ0YWJsZSIsInBheWxvYWQiLCJ0aGVuIiwic3Vic2NyaWJlIiwicmVtb3ZlQ2hhbm5lbCIsImZldGNoU2FmZXR5QWxlcnRzIiwiZ3QiLCJEYXRlIiwidG9JU09TdHJpbmciLCJnZXRPcHRpbWFsUm91dGUiLCJzdGFydCIsImRlc3RpbmF0aW9uIiwiZGlzdGFuY2UiLCJkdXJhdGlvbiIsImNvbmdlc3Rpb25fbGV2ZWwiLCJ3YXlwb2ludHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrowd-density%2Froute&page=%2Fapi%2Fcrowd-density%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrowd-density%2Froute.ts&appDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cyouse%5COneDrive%5CDesktop%5CKAU%5CFourth_Year_IT%5CTerm2%5CCPIT-455%5CFinal-Project%5Ctafweej_Hajj&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();